generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  imageurl      String?
  firstName     String
  lastName      String
  phone         String?
  role          UserRole  @default(CLIENT)
  provider      Provider?
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Provider {
  id               String            @id @default(uuid())
  firstName        String
  lastName         String
  imageurl         String?
  bio              String?
  email            String?
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?           @unique
  bookings         Booking[]
  bookingSettings  BookingSettings[] @relation("BookingSettingsProviders")
  rating           Float?            @default(0)
  totalReviews     Int?              @default(0)
  role             ProviderRole      @default(TRAINER)
  isAvailable      Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Service {
  id               String            @id @default(uuid())
  name             String
  description      String?
  bookings         Booking[]
  bookingSettings  BookingSettings[] // one service can have multiple settings
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Booking {
  id            String    @id @default(uuid())
  client        User?      @relation(fields: [clientId], references: [id])
  clientId      String?
  provider      Provider  @relation(fields: [providerId], references: [id])
  providerId    String
  services      Service @relation(fields: [serviceId],references: [id])
  serviceId     String
  price         Float
  sessionDuration Int     // in minutes
  date          DateTime
  time          String
  
  status        BookingStatus @default(PENDING)
  specialRequests String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OperatingHours {
  id            String    @id @default(uuid())
  // provider      Provider  @relation(fields: [providerId], references: [id])
  // providerId    String
  dayOfWeek     Int       // 0-6 (Sunday-Saturday)
  startTime     String    // Format: "HH:MM"
  endTime       String    // Format: "HH:MM"
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
// if provider
  // @@unique([providerId, dayOfWeek])
  @@unique([dayOfWeek])
}

model BookingSettings {
  id                      String       @id @default(uuid())
  service                 Service      @relation(fields: [serviceId], references: [id])
  serviceId               String
  providers               Provider[]   @relation("BookingSettingsProviders")
  defaultSessionDuration  Int          @default(60)
  defaultPrice            Float        @default(650.00)
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  @@unique([serviceId, id]) // optional uniqueness for cleaner duplicates
}

enum ProviderRole {
  ADMIN
  TRAINER
  NUTRITIONIST
  PHYSIOTHERAPIST
  MASSAGE_THERAPIST
  MANAGER
  ASSISTANT
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
  SUPPORT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}